{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "pinky",
  "scopeName": "source.pinky",
  "firstLineMatch": "^#!.*\\bpinky\\b",
  "foldingStartMarker": "\\b(func|for|while|if)\\b",
  "foldingStopMarker": "\\bend\\b",
  "patterns": [
    { "include": "#comments" },
    { "include": "#punctuation" },
    { "include": "#keywords" },
    { "include": "#functions" },
    { "include": "#parameters" },
    { "include": "#functionInvocations" },
    { "include": "#assignmentTargets" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#strings" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash",
          "match": "--.*$"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma",
          "match": ","
        },
        {
          "name": "punctuation.section.group.begin",
          "match": "\\("
        },
        {
          "name": "punctuation.section.group.end",
          "match": "\\)"
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|then|else|while|do|for|end|ret)\\b"
        },
        {
          "name": "storage.type.function",
          "match": "\\bfunc\\b"
        },
        {
          "name": "constant.language",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.operator.logical",
          "match": "\\b(and|or)\\b"
        },
        {
          "name": "support.function",
          "match": "\\b(print|println)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "(?<=\\bfunc\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "name": "variable.parameter",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*(,|\\)))"
        }
      ]
    },
    "functionInvocations": {
      "patterns": [
        {
          "name": "entity.name.function.call",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "assignmentTargets": {
      "patterns": [
        {
          "name": "variable.other.assignment",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*:=)"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator",
          "match": ":=|~=|==|<=|>=|<|>|\\+|-|\\*|/|%|\\^|~"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        }
      ]
    }
  }
}
